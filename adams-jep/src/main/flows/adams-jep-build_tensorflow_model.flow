# Project: adams
# Date: 2024-08-16 13:06:58
# User: fracpete
# Charset: UTF-8
# Modules: adams-core,adams-jep
#
adams.flow.control.Flow -annotation "Builds a Tensorflow model on the abalone dataset\\nand outputs the results of a prediction.\\nRequired Python libraries:\\n- tensorflow\\n- pandas\\n- numpy" -flow-execution-listener adams.flow.execution.NullListener -flow-restart-manager adams.flow.control.flowrestart.NullManager
 adams.flow.standalone.JepEngine
 adams.flow.source.Start
 adams.flow.control.Trigger -name "build model"
  adams.flow.standalone.Jep -inline-script "# based on:\\n# https://www.tensorflow.org/tutorials/load_data/csv\\nimport numpy as np\\nnp.set_printoptions(precision=3, suppress=True)\\nimport pandas as pd\\nimport tensorflow as tf\\nfrom tensorflow.keras import layers\\nimport keras\\n\\nprint(\\\'Loading data...\\\')\\nabalone_train = pd.read_csv(\\n    \\\'https://storage.googleapis.com/download.tensorflow.org/data/abalone_train.csv\\\', \\n    names=[\\\'Length\\\', \\\'Diameter\\\', \\\'Height\\\', \\\'Whole weight\\\', \\\'Shucked weight\\\', \\\'Viscera weight\\\', \\\'Shell weight\\\', \\\'Age\\\'])\\n\\nabalone_features = abalone_train.copy()\\nabalone_labels = abalone_features.pop(\\\'Age\\\')\\nabalone_features = np.array(abalone_features)\\n\\nabalone_model = tf.keras.Sequential([\\n    layers.Dense(64, activation=\\\'relu\\\'), \\n    layers.Dense(1)\\n])\\nabalone_model.compile(\\n    loss = tf.keras.losses.MeanSquaredError(), \\n    optimizer = tf.keras.optimizers.Adam())\\n\\nprint(\\\'Training model...\\\')\\nabalone_model.fit(abalone_features, abalone_labels, epochs=10)\\n" -outputs abalone_model=model
 adams.flow.control.Trigger -name "prediction data"
  adams.flow.source.StringConstants -output-array true -string 0.455 -string 0.365 -string 0.095 -string 0.514 -string 0.2245 -string 0.101 -string 0.15 -conversion adams.data.conversion.StringToDouble
  adams.flow.transformer.SetStorageValue -storage-name data
 adams.flow.control.Trigger -name "make prediction"
  adams.flow.source.Jep -inline-script "preds = abalone_model.predict(np.array(data).reshape((1, 7)), verbose=0)" -inputs abalone_model=model -inputs data=data -forwards preds
  adams.flow.transformer.GetMapValue -key preds
  adams.flow.transformer.Convert -conversion adams.data.conversion.AnyToString
  adams.flow.sink.Display -display-type adams.flow.core.displaytype.Default -writer adams.data.io.output.NullWriter